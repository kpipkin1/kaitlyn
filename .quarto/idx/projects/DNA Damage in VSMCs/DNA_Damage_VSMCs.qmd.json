{"title":"DNA Damage in VSMCs","markdown":{"yaml":{"title":"DNA Damage in VSMCs","author":"Kaitlyn Pipkin","editor":{"markdown":{"wrap":72}}},"headingText":"Project Overview","containsRefs":false,"markdown":"\n\n\nThe goal of this project is to assess the extent of DNA damage in\nvascular smooth muscle cells (VSMCs) following treatment with\nDoxorubicin. I will be using a data set that consists of 96 CSV files\ngenerated from ImageJ analysis. Each sample includes two channels: the\nDAPI (blue) channel, which stains cell nuclei, and the γH2AX (green)\nchannel, an established marker of DNA damage. VSMCs were treated with\nDoxorubicin at four time points: days 3, 4, 7, and 11. VSMCs were also\ntreated at different concentrations of Doxorubicin: 0 μM, 0.1 μM, 0.2\nμM, and 0.4 μM. This study aims to determine the percentage of γH2AX\nsignal normalized to nuclear area across different conditions to\ndetermine if there is any impact from dosage and duration on DNA damage.\n\n# Set the working directory\n\n```{r}\n#setwd(\"C:/Users/kpipkin1/Documents/GitHub/kaitlyn/projects/DNA Damage in VSMCs\")\n```\n\n# Load the necessary libraries\n\n```{r}\n#| message: false\n\nlibrary(tidyverse) \n\n```\n\n# Read in all of the CSV Files\n\n```{r}\nfile_paths <- list.files(pattern = \"\\\\.csv$\", full.names = TRUE)\n```\n\nIn this code chunk, I am using Base R. My variable here is \"file_paths\".\nThis variable will contain a list of file names that I have stored in my\ncurrent working directory. The \"list.files\" function searches for files\nin that current working directory. The \"pattern=(2 back slashes).csv\\$\"\nargument will allow for only the files that end in \".csv\" to be included\nin my \"file_paths\" variable. This is because in regular expressions, a\nperiod means \"any character\" so we have to escape that with 2\nbackslashes to match to a period. Because the filename ends after csv, I\nuse a dollar sign at the end of the pattern to indicate that csv is the\nend of the string so it will only pull files that end in .csv, not just\na file that contains .csv. I use the \"full.names=TRUE\" peice to return\nthe entire file path instead of just the file name itself. \\# Read all\nof the .csv Files into one Dataset\n\n```{r}\n#| message: false\n\nall_data<-file_paths %>%\n  set_names() %>%\n  map_dfr(read_csv, .id = \"filename\")\n\n```\n\nMy new variable here is \"all_data\", which is where all of my file_paths\nare combined into one big data set. The file_paths%\\>% will start with\nthe list of the .csv file paths and allow them to be piped in the next\nfunction, \"set_names()\". This allows R to know which row came from which\nfile. The \"map_dfr(read_csv,.id=filename)\" Makes R read each csv file in\nthe list and combine all of the files together into one data frame. In\naddition, R then adds a new column to the big data frame called\n\"filename\".The map_dfr function is from a package in tidyverse called\npurrr. dfr means data frame row bind.\n\n# Use File Names to Pull Metadata\n\n```{r}\nall_data <- all_data %>%\n  mutate(\n    base_name = filename %>%\n      basename() %>%\n      str_remove(\" \\\\(blue\\\\)| \\\\(green\\\\)\") %>%\n      str_remove(\"-summary\\\\.csv$\"),\n    day = str_extract(filename, \"\\\\d+d\"),\n    dosage = case_when(\n      str_detect(filename, \"0\\\\.1uM\") ~ \"0.1uM\",\n      str_detect(filename, \"0\\\\.2uM\") ~ \"0.2uM\",\n      str_detect(filename, \"0\\\\.4uM\") ~ \"0.4uM\",\n      str_detect(filename, \"no doxo\") ~ \"0uM\",\n      TRUE ~ NA_character_\n    ),\n    channel = case_when(\n      str_detect(filename, \"blue\") ~ \"blue\",\n      str_detect(filename, \"green\") ~ \"green\",\n      TRUE ~ NA_character_\n    )\n  )\n\n\n```\n\nThe \"mutate()\" function adds new columns to the big dataset by\nextracting the information from the filename column. The basename column\nuses only the dosage, sample ID, and timepoint to help join files\ntogether later. The timepoint is extracted from the filename and matches\nto patterns listed in the file name which in this case is \"11d\" for\nexample. By using \"case_when()\" you can add a column for dosage by\nfinding patterns like \"0.1uM\" or \"no doxo\" and defining what they mean.\nThe channel column is based on the fluorescence color also pulled from\nthe filename. Both the mutate and case_when functions are from packages\nin tidyverse called dplyr and stringr.\n\n# Separate the Dataset into Blue and Green Channels\n\n```{r}\nblue <- all_data %>%\n  filter(channel == \"blue\") %>%\n  select(base_name, day, dosage, Count, `Total Area`, `Average Size`, `%Area`, Mean) %>%\n  rename_with(~ paste0(., \"_blue\"), -c(base_name, day, dosage))\n\ngreen <- all_data %>%\n  filter(channel == \"green\") %>%\n  select(base_name, Count, `Total Area`, `Average Size`, `%Area`, Mean) %>%\n  rename_with(~ paste0(., \"_green\"), -base_name)\n\n```\n\nThis code split my dataset into two tables: one with images from the\nblue channel and one with images from the green channel. Then I rename\nthe measurment columns with the appropriate channel name to help join\nthem later. The filter and rename_with functions are both from packages\nin tidyverse called dplyr.\n\n# Join Green and Blue Channel Images Together\n\n```{r}\ncombined <- inner_join(blue, green, by = \"base_name\")\n\n```\n\nThe \"inner_join\" function merges the blue and green data tables together\nbased on their basename, which includes the dosage, timepoint, and\nsample ID. This function is from the dplyr package in tidyverse. The\njoining of these two datasets is a new varibale called \"combined\".\n\n# Calculate the Percent of Green area (yH2AX) normalized to the Blue area (DAPI)\n\n```{r}\ncombined <- combined %>%\n  mutate(percent_gammaH2AX = (`%Area_green` / `%Area_blue`) * 100)\n\n```\n\nHere, I add a new column called \"percent_gammaH2AX to the \"combined\"\ndataset using the \"mutate()\" function. This column will divide the\nprecent of the green area (the yH2AX signal, which measures DNA damage)\nby the percent of the blue area (DAPI signal, which measures the total\nnuclei). I then multiply this by 100 to get a percentage which gives me\nthe normalized value that gives me the percent of DNA damage relative to\nthe number of cells.\n\n# Clean Data\n\n```{r}\ncombined <- combined %>%\n  filter(!is.na(dosage), !is.na(percent_gammaH2AX), !is.na(day)) %>%\n  mutate(\n    dosage = factor(dosage, levels = c(\"0uM\", \"0.1uM\", \"0.2uM\", \"0.4uM\")),\n    day = factor(day, levels = c(\"3d\", \"4d\", \"7d\", \"11d\"))\n  ) %>%\n  droplevels()\n```\n\nIn this step I remove any rows that do not have dosage,\npercent_gammaH2AX, or timepoints using \"filter()\". Next, \"mutate()\" is\nused to convert the dosage and day columns into categorical variables\nand set them in ascending order. \"droplevels\" is then used to remove any\ndosage or day lables that were no longer used in my new filtered\ndataset. Drop levels, is.na, and factor are all functions in base R.\n\n# Pick Colors for the Plot\n\n```{r}\nbox_fill <- c(\n  \"3d\" = \"#66c2a5\",  # green\n  \"4d\" = \"#fc8d62\",  # orange\n  \"7d\" = \"#8da0cb\",  # blue\n  \"11d\" = \"#e78ac3\"  # pink\n)\n```\n\nHere I made a variable called \"box_fil\" where each day is assigned to a\nspecific color using the \"c()\" function.\n\n# Generate a Combined Plot looking at the Percent of DNA Damage Across Dosage of Doxorubicin\n\n```{r}\nggplot(combined, aes(x = dosage, y = percent_gammaH2AX, fill = day)) +\n  geom_boxplot(position = position_dodge(width = 0.8), alpha = 0.4, width = 0.4, outlier.shape = NA) +\n  geom_jitter(aes(color = day), \n              position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), \n              size = 2, alpha = 0.8) +\n  scale_fill_manual(values = box_fill) +\n  scale_color_manual(values = box_fill) +\n  labs(\n    title = \"Assessing Dose- and Time-Dependent DNA Damage in VSMCs Following Doxorubicin Treatment\",\n    x = \"Doxorubicin Dose (uM)\",\n    y = \"% γH2AX / % DAPI\",\n    fill = \"Day\",\n    color = \"Day\"\n  ) +\n  theme_minimal()\n\n```\n\nIn this step, I am ready to graph so I will use the ggplot2 package in\ntidyverse. The \"ggplot()\" function creates a box plot. The \"aes()\"\nfunction maps dosage to the x axis and percent_gammaH2AX to the y axis\nand the boxes are filled based on their corresponding \"box_fill\" color.\nThe \"geom_boxplot()\" function shoes the distribution f the values in\neach group and \"geom_jitter() allows me to add the individual values. To\nmake the individual points a darker color than their corresponding\nbox_fill, I use \"scale_fill_manual()\" and \"scale_color_manual()\".\n\"labs()\" allows me to name my title and axis lables. I used the\n\"theme_minimal()\"function to keep the plot clean and simple.\n\n# Plot by the Individual Days Separately\n\n```{r}\nplot_day <- function(day_label) {\n  combined %>%\n    filter(day == day_label) %>%\n    ggplot(aes(x = dosage, y = percent_gammaH2AX)) +\n    geom_boxplot(fill = box_fill[day_label], alpha = 0.4, width = 0.3, outlier.shape = NA) +\n    geom_jitter(color = box_fill[day_label], width = 0.15, size = 2, alpha = 0.8) +\n    labs(\n      title = paste(\"Dose-Dependent DNA Damage in VSMCs on\", day_label),\n      x = \"Doxorubicin Dose (uM)\",\n      y = \"% γH2AX / % DAPI\"\n    ) +\n    theme_minimal()\n}\n\n\nplot_day(\"3d\")\nplot_day(\"4d\")\nplot_day(\"7d\")\nplot_day(\"11d\")\n\n```\n\nIn this final step, I wrote a function called \"plot_day()\". I then use\nthe argument, \"day_label\" to create a boxplot showing DNA damage across\nDoxorubicin treatments on that specific day. this filters the combined\ndata set to only include rows matching the day.\n","srcMarkdownNoYaml":"\n\n# Project Overview\n\nThe goal of this project is to assess the extent of DNA damage in\nvascular smooth muscle cells (VSMCs) following treatment with\nDoxorubicin. I will be using a data set that consists of 96 CSV files\ngenerated from ImageJ analysis. Each sample includes two channels: the\nDAPI (blue) channel, which stains cell nuclei, and the γH2AX (green)\nchannel, an established marker of DNA damage. VSMCs were treated with\nDoxorubicin at four time points: days 3, 4, 7, and 11. VSMCs were also\ntreated at different concentrations of Doxorubicin: 0 μM, 0.1 μM, 0.2\nμM, and 0.4 μM. This study aims to determine the percentage of γH2AX\nsignal normalized to nuclear area across different conditions to\ndetermine if there is any impact from dosage and duration on DNA damage.\n\n# Set the working directory\n\n```{r}\n#setwd(\"C:/Users/kpipkin1/Documents/GitHub/kaitlyn/projects/DNA Damage in VSMCs\")\n```\n\n# Load the necessary libraries\n\n```{r}\n#| message: false\n\nlibrary(tidyverse) \n\n```\n\n# Read in all of the CSV Files\n\n```{r}\nfile_paths <- list.files(pattern = \"\\\\.csv$\", full.names = TRUE)\n```\n\nIn this code chunk, I am using Base R. My variable here is \"file_paths\".\nThis variable will contain a list of file names that I have stored in my\ncurrent working directory. The \"list.files\" function searches for files\nin that current working directory. The \"pattern=(2 back slashes).csv\\$\"\nargument will allow for only the files that end in \".csv\" to be included\nin my \"file_paths\" variable. This is because in regular expressions, a\nperiod means \"any character\" so we have to escape that with 2\nbackslashes to match to a period. Because the filename ends after csv, I\nuse a dollar sign at the end of the pattern to indicate that csv is the\nend of the string so it will only pull files that end in .csv, not just\na file that contains .csv. I use the \"full.names=TRUE\" peice to return\nthe entire file path instead of just the file name itself. \\# Read all\nof the .csv Files into one Dataset\n\n```{r}\n#| message: false\n\nall_data<-file_paths %>%\n  set_names() %>%\n  map_dfr(read_csv, .id = \"filename\")\n\n```\n\nMy new variable here is \"all_data\", which is where all of my file_paths\nare combined into one big data set. The file_paths%\\>% will start with\nthe list of the .csv file paths and allow them to be piped in the next\nfunction, \"set_names()\". This allows R to know which row came from which\nfile. The \"map_dfr(read_csv,.id=filename)\" Makes R read each csv file in\nthe list and combine all of the files together into one data frame. In\naddition, R then adds a new column to the big data frame called\n\"filename\".The map_dfr function is from a package in tidyverse called\npurrr. dfr means data frame row bind.\n\n# Use File Names to Pull Metadata\n\n```{r}\nall_data <- all_data %>%\n  mutate(\n    base_name = filename %>%\n      basename() %>%\n      str_remove(\" \\\\(blue\\\\)| \\\\(green\\\\)\") %>%\n      str_remove(\"-summary\\\\.csv$\"),\n    day = str_extract(filename, \"\\\\d+d\"),\n    dosage = case_when(\n      str_detect(filename, \"0\\\\.1uM\") ~ \"0.1uM\",\n      str_detect(filename, \"0\\\\.2uM\") ~ \"0.2uM\",\n      str_detect(filename, \"0\\\\.4uM\") ~ \"0.4uM\",\n      str_detect(filename, \"no doxo\") ~ \"0uM\",\n      TRUE ~ NA_character_\n    ),\n    channel = case_when(\n      str_detect(filename, \"blue\") ~ \"blue\",\n      str_detect(filename, \"green\") ~ \"green\",\n      TRUE ~ NA_character_\n    )\n  )\n\n\n```\n\nThe \"mutate()\" function adds new columns to the big dataset by\nextracting the information from the filename column. The basename column\nuses only the dosage, sample ID, and timepoint to help join files\ntogether later. The timepoint is extracted from the filename and matches\nto patterns listed in the file name which in this case is \"11d\" for\nexample. By using \"case_when()\" you can add a column for dosage by\nfinding patterns like \"0.1uM\" or \"no doxo\" and defining what they mean.\nThe channel column is based on the fluorescence color also pulled from\nthe filename. Both the mutate and case_when functions are from packages\nin tidyverse called dplyr and stringr.\n\n# Separate the Dataset into Blue and Green Channels\n\n```{r}\nblue <- all_data %>%\n  filter(channel == \"blue\") %>%\n  select(base_name, day, dosage, Count, `Total Area`, `Average Size`, `%Area`, Mean) %>%\n  rename_with(~ paste0(., \"_blue\"), -c(base_name, day, dosage))\n\ngreen <- all_data %>%\n  filter(channel == \"green\") %>%\n  select(base_name, Count, `Total Area`, `Average Size`, `%Area`, Mean) %>%\n  rename_with(~ paste0(., \"_green\"), -base_name)\n\n```\n\nThis code split my dataset into two tables: one with images from the\nblue channel and one with images from the green channel. Then I rename\nthe measurment columns with the appropriate channel name to help join\nthem later. The filter and rename_with functions are both from packages\nin tidyverse called dplyr.\n\n# Join Green and Blue Channel Images Together\n\n```{r}\ncombined <- inner_join(blue, green, by = \"base_name\")\n\n```\n\nThe \"inner_join\" function merges the blue and green data tables together\nbased on their basename, which includes the dosage, timepoint, and\nsample ID. This function is from the dplyr package in tidyverse. The\njoining of these two datasets is a new varibale called \"combined\".\n\n# Calculate the Percent of Green area (yH2AX) normalized to the Blue area (DAPI)\n\n```{r}\ncombined <- combined %>%\n  mutate(percent_gammaH2AX = (`%Area_green` / `%Area_blue`) * 100)\n\n```\n\nHere, I add a new column called \"percent_gammaH2AX to the \"combined\"\ndataset using the \"mutate()\" function. This column will divide the\nprecent of the green area (the yH2AX signal, which measures DNA damage)\nby the percent of the blue area (DAPI signal, which measures the total\nnuclei). I then multiply this by 100 to get a percentage which gives me\nthe normalized value that gives me the percent of DNA damage relative to\nthe number of cells.\n\n# Clean Data\n\n```{r}\ncombined <- combined %>%\n  filter(!is.na(dosage), !is.na(percent_gammaH2AX), !is.na(day)) %>%\n  mutate(\n    dosage = factor(dosage, levels = c(\"0uM\", \"0.1uM\", \"0.2uM\", \"0.4uM\")),\n    day = factor(day, levels = c(\"3d\", \"4d\", \"7d\", \"11d\"))\n  ) %>%\n  droplevels()\n```\n\nIn this step I remove any rows that do not have dosage,\npercent_gammaH2AX, or timepoints using \"filter()\". Next, \"mutate()\" is\nused to convert the dosage and day columns into categorical variables\nand set them in ascending order. \"droplevels\" is then used to remove any\ndosage or day lables that were no longer used in my new filtered\ndataset. Drop levels, is.na, and factor are all functions in base R.\n\n# Pick Colors for the Plot\n\n```{r}\nbox_fill <- c(\n  \"3d\" = \"#66c2a5\",  # green\n  \"4d\" = \"#fc8d62\",  # orange\n  \"7d\" = \"#8da0cb\",  # blue\n  \"11d\" = \"#e78ac3\"  # pink\n)\n```\n\nHere I made a variable called \"box_fil\" where each day is assigned to a\nspecific color using the \"c()\" function.\n\n# Generate a Combined Plot looking at the Percent of DNA Damage Across Dosage of Doxorubicin\n\n```{r}\nggplot(combined, aes(x = dosage, y = percent_gammaH2AX, fill = day)) +\n  geom_boxplot(position = position_dodge(width = 0.8), alpha = 0.4, width = 0.4, outlier.shape = NA) +\n  geom_jitter(aes(color = day), \n              position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), \n              size = 2, alpha = 0.8) +\n  scale_fill_manual(values = box_fill) +\n  scale_color_manual(values = box_fill) +\n  labs(\n    title = \"Assessing Dose- and Time-Dependent DNA Damage in VSMCs Following Doxorubicin Treatment\",\n    x = \"Doxorubicin Dose (uM)\",\n    y = \"% γH2AX / % DAPI\",\n    fill = \"Day\",\n    color = \"Day\"\n  ) +\n  theme_minimal()\n\n```\n\nIn this step, I am ready to graph so I will use the ggplot2 package in\ntidyverse. The \"ggplot()\" function creates a box plot. The \"aes()\"\nfunction maps dosage to the x axis and percent_gammaH2AX to the y axis\nand the boxes are filled based on their corresponding \"box_fill\" color.\nThe \"geom_boxplot()\" function shoes the distribution f the values in\neach group and \"geom_jitter() allows me to add the individual values. To\nmake the individual points a darker color than their corresponding\nbox_fill, I use \"scale_fill_manual()\" and \"scale_color_manual()\".\n\"labs()\" allows me to name my title and axis lables. I used the\n\"theme_minimal()\"function to keep the plot clean and simple.\n\n# Plot by the Individual Days Separately\n\n```{r}\nplot_day <- function(day_label) {\n  combined %>%\n    filter(day == day_label) %>%\n    ggplot(aes(x = dosage, y = percent_gammaH2AX)) +\n    geom_boxplot(fill = box_fill[day_label], alpha = 0.4, width = 0.3, outlier.shape = NA) +\n    geom_jitter(color = box_fill[day_label], width = 0.15, size = 2, alpha = 0.8) +\n    labs(\n      title = paste(\"Dose-Dependent DNA Damage in VSMCs on\", day_label),\n      x = \"Doxorubicin Dose (uM)\",\n      y = \"% γH2AX / % DAPI\"\n    ) +\n    theme_minimal()\n}\n\n\nplot_day(\"3d\")\nplot_day(\"4d\")\nplot_day(\"7d\")\nplot_day(\"11d\")\n\n```\n\nIn this final step, I wrote a function called \"plot_day()\". I then use\nthe argument, \"day_label\" to create a boxplot showing DNA damage across\nDoxorubicin treatments on that specific day. this filters the combined\ndata set to only include rows matching the day.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"DNA_Damage_VSMCs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["cosmo","brand"],"title":"DNA Damage in VSMCs","author":"Kaitlyn Pipkin","editor":{"markdown":{"wrap":72}}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}