{
  "hash": "d7bcf7e9bfa4229299cbee1bb60bcc43",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"DNA Damage in VSMCs\"\nauthor: \"Kaitlyn Pipkin\"\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n# Set the working directory\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#setwd(\"C:/Users/kpipkin1/Documents/GitHub/kaitlyn/projects/DNA Damage in VSMCs\")\n```\n:::\n\n\n\n# Load the necessary libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) \nlibrary(readr) \nlibrary(ggplot2) \nlibrary(stringr) \n```\n:::\n\n\n\n# Read in all of the CSV Files\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_paths <- list.files(pattern = \"\\\\.csv$\", full.names = TRUE)\n```\n:::\n\n\nMy variable here is \"file_paths\". This variable will contain a list of file names that I have stored in my current working directory. The \"list.files\" function searches for files in that current working directory. The \"pattern=(2 back slashes).csv$\" argument will allow for only the files that end in \".csv\" to be included in my \"file_paths\" variable. This is because in regular expressions, a period means \"any character\" so we have to escape that with 2 backslashes to match to a period. Because the filename ends after csv, I use a dollar sign at the end of the pattern to indicate that csv is the end of the string so it will only pull files that end in .csv, not just a file that contains .csv. I use the \"full.names=TRUE\" peice to return the entire file path instead of just the file name itself. \n# Read all of the .csv Files into one Dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_data<-file_paths %>%\n  set_names() %>%\n  map_dfr(read_csv, .id = \"filename\")\n```\n:::\n\n\nMy new variable here is \"all_data\", which is where all of my file_paths are combined into one big data set. The file_paths%>% will start with the list of the .csv file paths and allow them to be piped in the next function, \"set_names()\". This allows R to know which row came from which file. The \"map_dfr(read_csv,.id=filename)\" Makes R read each csv file in the list and combine all of the files together into one data frame. In addition, R then adds a new column to the big data frame called \"filename\".  \n\n# Use File Names to Pull Metadata\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_data <- all_data %>%\n  mutate(\n    base_name = filename %>%\n      basename() %>%\n      str_remove(\" \\\\(blue\\\\)| \\\\(green\\\\)\") %>%\n      str_remove(\"-summary\\\\.csv$\"),\n    day = str_extract(filename, \"\\\\d+d\"),\n    dosage = case_when(\n      str_detect(filename, \"0\\\\.1uM\") ~ \"0.1uM\",\n      str_detect(filename, \"0\\\\.2uM\") ~ \"0.2uM\",\n      str_detect(filename, \"0\\\\.4uM\") ~ \"0.4uM\",\n      str_detect(filename, \"no doxo\") ~ \"0uM\",\n      TRUE ~ NA_character_\n    ),\n    channel = case_when(\n      str_detect(filename, \"blue\") ~ \"blue\",\n      str_detect(filename, \"green\") ~ \"green\",\n      TRUE ~ NA_character_\n    )\n  )\n```\n:::\n\n\n\nThe \"mutate()\" function adds new columns to the big dataset by extracting the information from the filename column. The basename column uses only the dosage, sample ID, and timepoint to help join files together later. The timepoint is extracted from the filename and matches to patterns listed in the file name which in this case is \"11d\" for example. By using \"case_when()\" you can add a column for dosage by finding patterns like \"0.1uM\" or \"no doxo\" and defining what they mean. The channel column is based on the fluorescence color also pulled from the filename. \n\n# Separate the Dataset into Blue and Green Channels\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblue <- all_data %>%\n  filter(channel == \"blue\") %>%\n  select(base_name, day, dosage, Count, `Total Area`, `Average Size`, `%Area`, Mean) %>%\n  rename_with(~ paste0(., \"_blue\"), -c(base_name, day, dosage))\n\ngreen <- all_data %>%\n  filter(channel == \"green\") %>%\n  select(base_name, Count, `Total Area`, `Average Size`, `%Area`, Mean) %>%\n  rename_with(~ paste0(., \"_green\"), -base_name)\n```\n:::\n\n\n\nThis code split my dataset into two tables: one with images from the blue channel and one with images from the green channel. Then I rename the measurment columns with the appropriate channel name to help join them later.  \n\n# Join Green and Blue Channel Images Together\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined <- inner_join(blue, green, by = \"base_name\")\n```\n:::\n\n\n\nThe \"inner_join\" function merges the blue and green data tables together based on their basename, which includes the dosage, timepoint, and sample ID. The joining of these two datasets is a new varibale called \"combined\".\n\n# Calculate the Percent of Green area (yH2AX) normalized to the Blue area (DAPI)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined <- combined %>%\n  mutate(percent_gammaH2AX = (`%Area_green` / `%Area_blue`) * 100)\n```\n:::\n\n\n\nHere, I add a new column called \"percent_gammaH2AX to the \"combined\" dataset using the \"mutate()\" function. This column will divide the precent of the green area (the yH2AX signal, which measures DNA damage) by the percent of the blue area (DAPI signal, which measures the total nuclei). I then multiply this by 100 to get a percentage which gives me the normalized value that gives me the percent of DNA damage relative to the number of cells.  \n\n# Clean Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined <- combined %>%\n  filter(!is.na(dosage), !is.na(percent_gammaH2AX), !is.na(day)) %>%\n  mutate(\n    dosage = factor(dosage, levels = c(\"0uM\", \"0.1uM\", \"0.2uM\", \"0.4uM\")),\n    day = factor(day, levels = c(\"3d\", \"4d\", \"7d\", \"11d\"))\n  ) %>%\n  droplevels()\n```\n:::\n\n\n\nIn this step I remove any rows that do not have dosage, percent_gammaH2AX, or timepoints using \"filter()\". Next, \"mutate()\" is used to convert the dosage and day columns into categorical variables and set them in ascending order. \"droplevels\" is then used to remove any dosage or day lables that were no longer used in my new filtered dataset. \n\n# Pick Colors for the Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbox_fill <- c(\n  \"3d\" = \"#66c2a5\",  # green\n  \"4d\" = \"#fc8d62\",  # orange\n  \"7d\" = \"#8da0cb\",  # blue\n  \"11d\" = \"#e78ac3\"  # pink\n)\n```\n:::\n\n\n\nHere I made a variable called \"box_fil\" where each day is assigned to a specific color using the \"c()\" function.\n\n# Generate a Combined Plot looking at the Percent of DNA Damage Across Dosage of Doxorubicin\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(combined, aes(x = dosage, y = percent_gammaH2AX, fill = day)) +\n  geom_boxplot(position = position_dodge(width = 0.8), alpha = 0.4, width = 0.4, outlier.shape = NA) +\n  geom_jitter(aes(color = day), \n              position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8), \n              size = 2, alpha = 0.8) +\n  scale_fill_manual(values = box_fill) +\n  scale_color_manual(values = box_fill) +\n  labs(\n    title = \"Assessing Dose- and Time-Dependent DNA Damage in VSMCs Following Doxorubicin Treatment\",\n    x = \"Doxorubicin Dose\",\n    y = \"% γH2AX / % DAPI\",\n    fill = \"Day\",\n    color = \"Day\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](DNA_Damage_VSMCs_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nIn this step, I am ready to graph. The \"ggplot()\" function creates a box plot. The \"aes()\" function maps dosage to the x axis and percent_gammaH2AX to the y axis and the boxes are filled based on their corresponding \"box_fill\" color. The \"geom_boxplot()\" function shoes the distribution f the values in each group and \"geom_jitter() allows me to add the individual values. To make the individual points a darker color than their corresponding box_fill, I use \"scale_fill_manual()\" and \"scale_color_manual()\". \"labs()\" allows me to name my title and axis lables. I used the \"theme_minimal()\"function to keep the plot clean and simple. \n\n# Plot by the Individual Days Separately \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_day <- function(day_label) {\n  combined %>%\n    filter(day == day_label) %>%\n    ggplot(aes(x = dosage, y = percent_gammaH2AX)) +\n    geom_boxplot(fill = box_fill[day_label], alpha = 0.4, width = 0.3, outlier.shape = NA) +\n    geom_jitter(color = box_fill[day_label], width = 0.15, size = 2, alpha = 0.8) +\n    labs(\n      title = paste(\"Dose-Dependent DNA Damage in VSMCs on\", day_label),\n      x = \"Doxorubicin Dose\",\n      y = \"% γH2AX / % DAPI\"\n    ) +\n    theme_minimal()\n}\n\n\nplot_day(\"3d\")\n```\n\n::: {.cell-output-display}\n![](DNA_Damage_VSMCs_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_day(\"4d\")\n```\n\n::: {.cell-output-display}\n![](DNA_Damage_VSMCs_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_day(\"7d\")\n```\n\n::: {.cell-output-display}\n![](DNA_Damage_VSMCs_files/figure-html/unnamed-chunk-12-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_day(\"11d\")\n```\n\n::: {.cell-output-display}\n![](DNA_Damage_VSMCs_files/figure-html/unnamed-chunk-12-4.png){width=672}\n:::\n:::\n\n\n\nIn this final step, I wrote a funciton called \"plot_day()\". I then use the argument, \"day_label\" to create a boxplot showing DNA damage across Doxorubicin treatments on that specific day. this filters the combined dataset to only include rows matching the day.",
    "supporting": [
      "DNA_Damage_VSMCs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}